# https://docs.docker.com/compose/environment-variables/

# General
TZ=Europe/Zurich

# Postgres
POSTGRES_PASSWORD=sup3r_very.secrET-passw0rd
POSTGRES_USER=admin
POSTGRES_DB=blue

# Username and password in secret
THINGY_MQTT_HOST="mqtt.thing.zone"
THINGY_MQTT_PORT=1894
THINGY_MQTT_TOPIC="things/+/shadow/update"


BACKEND_GRPC_BIND_HOST=0.0.0.0
BACKEND_GRPC_BIND_PORT=5001


MESS_GRPC_BIND_HOST=0.0.0.0
MESS_GRPC_BIND_PORT=5001


MESSENGER_PROTO="syntax = \"proto3\";\n\nimport \"google/protobuf/empty.proto\";\n\n\n/**\n * Services that the bot service provides to the rest of the infrastructure\n *\n * # Setting new location\n * 1. Node-Red get button trigger (2 clicks)\n * 2. Ask messenger to ask for location\n * 3. Messenger, tells backend which location to store\n */\nservice Messenger {\n  rpc AskNewLocation (ThingyId) returns (google.protobuf.Empty);\n\n  rpc SendTestMessage (TestMessageRequest) returns (google.protobuf.Empty);\n}\n\n\nmessage ThingyId {\n  string thingy_uuid = 1;\n}\n\nmessage TestMessageRequest {\n  string text = 1;\n}\n\n/**\n * Not used yet\n */\nenum MessageType {\n  PLAIN = 0;\n  MARKDOWN = 1;\n}\n"
THINGY_PROTO="syntax = \"proto3\";\n\nimport \"google/protobuf/empty.proto\";\n\n/**\n * # New user start conversation with bot\n * 1. Messenger asks the backed for missing location\n * 2. If some thingy are missing locations, return to the messenger the uuids\n * 3. Like 'new location' scenario (of messenger), starting from point 2\n */\n\n/**\n * Implemented by the backend\n */\nservice PersistLocalization {\n    rpc GetPendingLocation (google.protobuf.Empty) returns (stream ThingyLocalization);\n    rpc SetNewLocation (ThingyLocalization) returns (google.protobuf.Empty);\n}\n\n\nmessage ThingyLocalization {\n    string thingy_uuid = 1;\n    string location = 2;\n}\n"
